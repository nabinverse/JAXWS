
package com.tintin.client;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;

import java.util.concurrent.Future;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;

import com.tintin.BillDetails;
import com.tintin.CalculateBillResponse;
import com.tintin.Customer;

/**
 * This class was generated by Apache CXF 3.0.0
 * 2015-09-01T14:16:47.571+05:30
 * Generated source version: 3.0.0
 * 
 */
public final class SimpleService_SimpleServiceImplPort_Client {

    private static final QName SERVICE_NAME = new QName("http://tintin.com/", "SimpleServiceImplService");

    private SimpleService_SimpleServiceImplPort_Client() {
    }

    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = SimpleServiceImplService.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        SimpleServiceImplService ss = new SimpleServiceImplService(wsdlURL, SERVICE_NAME);
        SimpleService port = ss.getSimpleServiceImplPort();  
        
        // step 1: async pool
       Customer customer = new com.tintin.Customer();
       customer.setAddress("async poll  : B 205 silver estate");
       customer.setAge(683112680);
       customer.setName("Name-1402405433");
       customer.setPhone("Phone-2115823153");
       Response<CalculateBillResponse> asyncResponse = port.calculateBillAsync(customer);

       while(!asyncResponse.isDone()){
    	   Thread.currentThread().sleep(1000);
    	   System.out.println("I am waiting for response");
       }
       System.out.println("Response ready");
       CalculateBillResponse response=asyncResponse.get();
       BillDetails bd= response.getReturn();
       
       //step 2: asynch call back 
       customer.setAddress("async call back : B 205 silver estate");
        AsyncHandler<CalculateBillResponse> handler = new MyAsyncHandler();
        Future<?> r = port.calculateBillAsync(customer, handler);
        System.out.println("calculateBillAsync.result=" + r);


      //step 3: call synchronous method
        try {
        	 customer.setAddress("sync : B 205 silver estate");
            BillDetails bill = port.calculateBill(customer);
            System.out.println("calculateBill.result=" + bill);

        } catch (CalculationException e) { 
            System.out.println("Expected exception: CalculationException has occurred.");
            System.out.println(e.toString());
        }

    }

}
